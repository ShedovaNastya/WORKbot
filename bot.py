import telebot
from telebot import types
import psycopg2
import requests


token = "7418667479:AAHCK0hHCnzZ3pVAz9d-HRE1UvpRLoIQVuA"

bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
    markup.add(item1)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç üíªWORKbotüíª–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞–π—Ç–∏ –¥–ª—è —Å–µ–±—è –ª—É—á—à—É—é –≤–∞–∫–∞–Ω—Å–∏—é. –°–∫–æ—Ä–µ–µ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"üë®‚Äçüíºüôàüë©‚Äçüíº', reply_markup=markup)

def check_salary(data):
    if data is None:
        return "–û –∑–∞—Ä–ø–ª–∞—Ç–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    for key, value in data.items():
        if key == 'to' and value != None:
            return(f'–¥–æ {data[key]} RUR')
    return '–†–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ'

def vacancies_to_string(vacancies):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∫–∞–∂–¥–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏,
    —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∑–Ω–∞—á–µ–Ω–∏—è –µ—ë –ø–æ–ª–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
    result = [vacancies['name'],vacancies['area'],  vacancies['salary'],  vacancies['experience'],vacancies['employment'],  vacancies['alternate_url']]
 
    return result

@bot.message_handler(content_types=['text'])
def answer(message):
    user_text = message.text
    url = "http://127.0.0.1:5000/get_vacancies"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'vacancy_name': user_text,
        'search_field': 'name'  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    }

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, params=params)
   
    if response.status_code == 200:
        vacancies = response.json()
    else:
        print(f"–û—à–∏–±–∫–∞: {response.status_code}")
    
    if user_text == '–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é':
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç")
    elif len(vacancies) == 0 :
        bot.send_message(message.chat.id, "–í–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç–∞–∫–æ–º –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç")
    else:
        flag = 0
        ans = ''
        for i in range(1,10):
            if i == 2 :
                ans += '–ì–æ—Ä–æ–¥: ' + str((vacancies[0][i])) + '   '
            if i == 1:
                ans += "–í–∞–∫–∞–Ω—Å–∏—è: " + str((vacancies[0][i])) + '   '
            if i == 3:
                continue
            if i == 4:
                ans += "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:  " + str((vacancies[0][i])) + '   '
            if i == 5:
                ans += "–ó–∞–Ω—è—Ç–æ—Å—Ç—å: "+ str((vacancies[0][i])) + '   '
            if i == 8 or i == 9:
                if i == 8:
                    ans += "–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç "+ str((vacancies[0][i])) + ' '
                else:
                    ans += " –¥–æ "+ str((vacancies[0][i])) + '   '
        ans += "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: "+ str((vacancies[0][6])) + '   '
        split_ans = ans.split("   ")
        new_line_ans = '\n'.join(split_ans)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ï—â–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        item2 = types.KeyboardButton("–§–∏–ª—å—Ç—Ä")
        markup.add(item1, item2)
            
        bot.send_message(message.chat.id, str(new_line_ans),  reply_markup=markup)
    ##########
    # if vacancies[2] == '–ø–∏–¥–æ—Ä':
    #     bot.send_message(message.chat.id, vacancies)

    # else:
    #     for i in range(20):
    #         post_preprocess_vacancies = vacancies_to_string(vacancies[i])
    #         # print(post_preprocess_vacancies)
    #         post_preprocess_vacancies[1] = post_preprocess_vacancies[1]['name']
    #         post_preprocess_vacancies[2] = check_salary(post_preprocess_vacancies[2])
            
    #         post_preprocess_vacancies[3] = post_preprocess_vacancies[3]['name']
    #         post_preprocess_vacancies[4] = post_preprocess_vacancies[4]['name']
    #         vacancies_str = '\n'.join(post_preprocess_vacancies)
            
    #         bot.send_message(message.chat.id, vacancies_str)

bot.polling()













//////–ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
import telebot
from telebot import types
import requests
import math

token = "7418667479:AAHCK0hHCnzZ3pVAz9d-HRE1UvpRLoIQVuA"

bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
    markup.add(item1)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç üíªWORKbotüíª –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞–π—Ç–∏ –¥–ª—è —Å–µ–±—è –ª—É—á—à—É—é –≤–∞–∫–∞–Ω—Å–∏—é.'
                     '–°–∫–æ—Ä–µ–µ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"üë®‚Äçüíºüôàüë©‚Äçüíº', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def answer(message):
    user_text = message.text
    url = "http://127.0.0.1:5000/get_vacancies"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'vacancy_name': user_text,
        'search_field': 'name'  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    }

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, params=params)
   
    if response.status_code == 200:
        vacancies = response.json()
    else:
        print(f"–û—à–∏–±–∫–∞: {response.status_code}")
    
    vac = user_text.split(' ')[-1]#–¥–ª—è —Å–ª—É—á–∞—è –∑–∞–ø—Ä–æ—Å–∞ - –ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ "..."
    
    if user_text != f"–ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac}":
        cnt_local = vacancies[-1][-1][-1] #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    else:
        response = requests.get(url, params = {
                                                'vacancy_name': vac,
                                                'search_field': 'name' })
        vacancies = response.json()
        cnt_local = vacancies[-1][-1][-1]# –ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac} –Ω–∞–π—Ç–∏ –¥–ª—è vac –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if user_text == '–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é':
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç")
    elif user_text != f"–ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac}" and cnt_local == 0 :
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ API")
        markup.add(item1) 
        bot.send_message(message.chat.id, '–õ–æ–∫–∞–ª—å–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç, —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ API, —Ç–æ–≥–¥–∞ —Å–∫–æ—Ä–µ–µ –∂–º–∏—Ç–µ –Ω–∞ "–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ API"',  reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton(f"–ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac}")
        item2 = types.KeyboardButton("–§–∏–ª—å—Ç—Ä")
        markup.add(item1, item2)

        cnt_to_output = math.ceil(cnt_local / 2)

        if user_text != f"–ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac}":
            bot.send_message(message.chat.id, f'–õ–æ–∫–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ {cnt_local} –≤–∞–∫–∞–Ω—Å–∏–π',  reply_markup=markup)
        
        s, e = 0, cnt_to_output#start, end - –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –≤—ã–≤–æ–¥–∏—Ç—å
        if user_text == f'–ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac}' and cnt_local != 1:
            s, e = cnt_to_output, cnt_local
        
        for cnt in range(s, e):
            ans = ''
            for i in range(1,10):
                if i == 2 :
                    ans += '–ì–æ—Ä–æ–¥: ' + str((vacancies[cnt][i])) + '   '
                if i == 1:
                    ans += f"–í–∞–∫–∞–Ω—Å–∏—è ‚Ññ {cnt+1}: " + str((vacancies[cnt][i])) + '   '
                if i == 3:
                    continue
                if i == 4:
                    ans += "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:  " + str((vacancies[cnt][i])) + '   '
                if i == 5:
                    ans += "–ó–∞–Ω—è—Ç–æ—Å—Ç—å: "+ str((vacancies[cnt][i])) + '   '
                if i == 8 or i == 9:
                    if i == 8:
                        ans += "–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç "+ str((vacancies[cnt][i])) + ' '
                    else:
                        ans += " –¥–æ "+ str((vacancies[cnt][i])) + '   '
            ans += "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: "+ str((vacancies[cnt][6])) + '   '
            split_ans = ans.split("   ")
            new_line_ans = '\n'.join(split_ans)
            bot.send_message(message.chat.id, str(new_line_ans))
            
            if (user_text == f'–ï—â–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vac}' and cnt == e-1) or cnt_local == 1 :
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton(f"API {vac}")
                item2 = types.KeyboardButton("–§–∏–ª—å—Ç—Ä")
                markup.add(item1, item2)
                bot.send_message(message.chat.id, f'–õ–æ–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ API, –∂–º–∏ —Å–∫–æ—Ä–µ–µ –∫–Ω–æ–ø–∫—É "API {vac}"',  reply_markup=markup)
    
bot.polling()  
    
    
