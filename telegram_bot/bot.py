import telebot
from telebot import types
import requests
import json
import os


token = os.getenv("TELEGRAM_TOKEN")
if token is None:
    token = ##############################################
number_of_output_vacancies = 5

flask_url = os.getenv("FLASK_URL")
if flask_url is None:
    flask_url = "http://127.0.0.1:5000"

bot = telebot.TeleBot(token)

class user_states:
    _user_states = {} # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    @classmethod
    def get(cls, key):
        return cls._user_states[key]
    
    @classmethod
    def set(cls, key, value):
        cls._user_states[key] = value


class vacancies_from_bd:
    _array = []

    @classmethod
    def set_array(cls, new_array):
        cls._array = new_array

    @classmethod
    def len(cls):
        return len(cls._array)
    
    @classmethod
    def slice(cls, st=0, end=-1):
        return cls._array[st:end]
    
    @classmethod
    def repr(cls):
        return repr(cls._array)
    
    @classmethod
    def all(cls):
        return cls._array


class vacancies_counter:
    """
    singletone –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    """
    value = 0

class count_vacancies_all:
    """
    singletone –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –±–¥
    """
    value = 0

class current_vacancy:
    value = ""

class filter_vacancy:
    exp = ""
    region = ""
    emp = ""

    def reset(cls):
        cls.exp = ""
        cls.region = ""
        cls.emp = ""

def create_query(vacancy):
    params = {
        'vacancy_name': vacancy
    }
    if filter_vacancy.exp != "":
        params['experience'] = filter_vacancy.exp
    if filter_vacancy.region != "":
        params["area"] = filter_vacancy.region
    if filter_vacancy.emp != "":
        params["employment"] = filter_vacancy.emp
    return params

def check_salary(data):
    if data is None:
        return "–û –∑–∞—Ä–ø–ª–∞—Ç–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    for key, value in data.items():
        if key == 'to' and value != None:
            return(f'–¥–æ {data[key]} RUR')
    return '–†–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ'

def vacancies_to_string(vacancies):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∫–∞–∂–¥–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏,
    —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∑–Ω–∞—á–µ–Ω–∏—è –µ—ë –ø–æ–ª–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
    result = [vacancies['name'],vacancies['area'],  vacancies['salary'],  vacancies['experience'],vacancies['employment'],  vacancies['alternate_url']]

    return result
    
@bot.message_handler(commands=['us'])
def us(message): 
    # dev function
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/start")
    markup.add(item1)
    bot.send_message(message.chat.id, f'{user_states.get(message.chat.id)}', reply_markup=markup)
    # user_states.set(message.chat.id, '–≤–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–∏') # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π

@bot.message_handler(commands=['flt'])
def us(message): 
    # dev function
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/start")
    markup.add(item1)
    bot.send_message(message.chat.id, f'{filter_vacancy.emp}, {filter_vacancy.exp}, {filter_vacancy.region}', reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message): 
    # initializer()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é")
    markup.add(item1)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç üíªWORKbotüíª –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞–π—Ç–∏ –¥–ª—è —Å–µ–±—è –ª—É—á—à—É—é –≤–∞–∫–∞–Ω—Å–∏—é.'
                     '–°–∫–æ—Ä–µ–µ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"üë®‚Äçüíºüôàüë©‚Äçüíº', reply_markup=markup)
    user_states.set(message.chat.id, '–≤–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–∏') # –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == '–≤–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–∏')
def answer(message):
    user_text = message.text
    if user_text == "–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é":
        markup = types.ReplyKeyboardRemove(selective=False)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",reply_markup=markup)
        user_states.set(message.chat.id,'–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏–π_–¥–µ–π—Å—Ç–≤–∏–π')
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é")
        markup.add(item1)
        bot.send_message(message.chat.id, "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
        user_states.set(message.chat.id,'–≤–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–∏',)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏–π_–¥–µ–π—Å—Ç–≤–∏–π")
def select(message):
    if message.text != "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π":
        current_vacancy.value = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
    item2 = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∞–ø–∏")
    item3 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞")
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=markup)
    user_states.set(message.chat.id, "–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏–π_–¥–µ–π—Å—Ç–≤–∏–π_–æ–±—Ä–∞–±–æ—Ç–∫–∞_–∫–Ω–æ–ø–æ–∫")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏–π_–¥–µ–π—Å—Ç–≤–∏–π_–æ–±—Ä–∞–±–æ—Ç–∫–∞_–∫–Ω–æ–ø–æ–∫")
def button_handler_bd_api_filter(message):
    user_text = message.text
    if user_text == "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫":
        user_states.set(message.chat.id, "–∑–∞–ø—Ä–æ—Å_–≤_–±–¥")
        db_query(message)
    elif user_text == "–ü–æ–∏—Å–∫ –ø–æ –∞–ø–∏":
        user_states.set(message.chat.id, "–∑–∞–ø—Ä–æ—Å_–ø–æ_–∞–ø–∏")
        api_query(message)
    elif user_text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter(message)
    else:
        bot.send_message(message.chat.id, "–Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫")
        user_states.set(message.chat.id, "–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏–π_–¥–µ–π—Å—Ç–≤–∏–π_–æ–±—Ä–∞–±–æ—Ç–∫–∞_–∫–Ω–æ–ø–æ–∫")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–∑–∞–ø—Ä–æ—Å_–≤_–±–¥")
def db_query(message):
    print(user_states.get(message.chat.id))
    url = f"{flask_url}/get_count_vacancies_bd"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = create_query(current_vacancy.value)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, params=params)

   
    if response.status_code == 200:
        print(response.json())
        vacancies_count = response.json()[0][0]
        if vacancies_count==0:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ò—Å–∫–∞—Ç—å –ø–æ –∞–ø–∏")
            item2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
            item3 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é")
            markup.add(item1, item2, item3)
            bot.send_message(message.chat.id, "–≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ –∞–ø–∏, –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é", reply_markup=markup)
            user_states.set(message.chat.id,'–∞–ø–∏_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è')
            button_handler_api_filter_vacancy(message)
            return
        else:
            count_vacancies_all.value = vacancies_count
            vacancies_counter.value = 0
            bot.send_message(message.chat.id, f'–õ–æ–∫–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ {vacancies_count} –≤–∞–∫–∞–Ω—Å–∏–π')
            user_states.set(message.chat.id, "–≤—ã–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–π_–∏–∑_–±–¥")
            send_vacancies_from_bd(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("/start")
        markup.add(item1)
        bot.send_message(message.chat.id, "–≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
        return
    
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–∞–ø–∏_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è")
def button_handler_api_filter_vacancy(message):
    user_text = message.text
    if user_text == "–ò—Å–∫–∞—Ç—å –ø–æ –∞–ø–∏":
        user_states.set(message.chat.id, "–∑–∞–ø—Ä–æ—Å_–ø–æ_–∞–ø–∏")
        # print('api')
        api_query(message)
    elif user_text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_—Ñ–∏–ª—å—Ç—Ä–∞")
        # print('filter')
        filter(message)
    elif user_text == "–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é":
        user_states.set(message.chat.id, "–≤–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–∏")
        # print('vacanci')
        answer(message)
    elif user_text=="–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫":
        user_states.set(message.chat.id, "–∞–ø–∏_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è")
    else:
        bot.send_message(message.chat.id, "–Ω–Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫")
        user_states.set(message.chat.id, "–∞–ø–∏_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–≤—ã–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–π_–∏–∑_–±–¥")
def send_vacancies_from_bd(message):
    flag = 0
    if vacancies_counter.value == 0:
        url = f"{flask_url}/get_vacancies_bd"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = create_query(current_vacancy.value)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞
        response = requests.get(url, params=params)
        vacancies_from_bd.set_array(response.json())
        print(vacancies_from_bd.all())
        # print(vacancies_from_bd._array)

    if vacancies_from_bd.len() > number_of_output_vacancies:
        output = vacancies_from_bd.slice(0, number_of_output_vacancies)
        vacancies_from_bd.set_array(vacancies_from_bd.slice(number_of_output_vacancies, vacancies_from_bd.len()))
        count_vacancies_all.value -= number_of_output_vacancies
    else:
        output = vacancies_from_bd._array
        vacancies_from_bd.set_array([])
        count_vacancies_all.value = 0
        flag = 1

    for cnt in range(len(output)):
        ans = ''
        for i in range(1,10):
            if i == 2 :
                ans += '–ì–æ—Ä–æ–¥: ' + str((output[cnt][i])) + '   '
            if i == 1:
                ans += f"–í–∞–∫–∞–Ω—Å–∏—è ‚Ññ {vacancies_counter.value+1}: " + str((output[cnt][i])) + '   '
            if i == 3:
                continue
            if i == 4:
                ans += "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:  " + str((output[cnt][i])) + '   '
            if i == 5:
                ans += "–ó–∞–Ω—è—Ç–æ—Å—Ç—å: "+ str((output[cnt][i])) + '   '
            if i == 8 or i == 9:
                if i == 8:
                    ans += "–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç "+ str((output[cnt][i])) + ' '
                else:
                    ans += " –¥–æ "+ str((output[cnt][i])) + '   '
        ans += "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: "+ str((output[cnt][6])) + '   '
        split_ans = ans.split("   ")
        new_line_ans = '\n'.join(split_ans)
        markup = types.ReplyKeyboardRemove(selective=False)
        bot.send_message(message.chat.id, str(new_line_ans), reply_markup=markup)
        vacancies_counter.value += 1

    if flag == 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –µ—â—ë")
        item2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
        item3 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
        item4 = types.KeyboardButton("–ò—Å–∫–∞—Ç—å –ø–æ –∞–ø–∏")
        markup.add(item1, item2, item3, item4)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
        user_states.set(message.chat.id, "–µ—â—ë_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è_–∞–ø–∏")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ò—Å–∫–∞—Ç—å –ø–æ –∞–ø–∏")
        item2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
        item3 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é")
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, "–≤–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ –∞–ø–∏, –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é", reply_markup=markup)
        user_states.set(message.chat.id,'–∞–ø–∏_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è')
        button_handler_api_filter_vacancy(message)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–µ—â—ë_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è_–∞–ø–∏")
def button_handler_other_filter_vacancy_api(message):
    if message.text == "–í—ã–≤–µ—Å—Ç–∏ –µ—â—ë":
        user_states.set(message.chat.id, "–≤—ã–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–π_–∏–∑_–±–¥")
        send_vacancies_from_bd(message)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter(message)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é":
        user_states.set(message.chat.id, "–≤–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–∏")
        answer(message)
    elif message.text == "–ò—Å–∫–∞—Ç—å –ø–æ –∞–ø–∏":
        user_states.set(message.chat.id, "–∑–∞–ø—Ä–æ—Å_–ø–æ_–∞–ø–∏")
        api_query(message)
    else:
        user_states.set(message.chat.id, "–µ—â—ë_—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞–Ω—Å–∏—è_–∞–ø–∏")
        bot.send_message(message.chat.id, "–Ω–∞–∂–º–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–∑–∞–ø—Ä–æ—Å_–ø–æ_–∞–ø–∏")
def api_query(message):
    url = f"{flask_url}/get_vacanices_api"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = create_query(current_vacancy.value)
    if 'area' in params.keys():
        if params['area'] != "":
            with open('city2id.json', 'r', encoding='utf-8') as file:
                data = json.load(file)
                params['area'] = data[params['area']]
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, params=params)
    
    if response.status_code == 200:
        print(response)
        number_of_founded_vacancies = len(response.json())
        if number_of_founded_vacancies == 0:
            markup = types.ReplyKeyboardMarkup()
            item1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
            item2 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é")
            item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ")
            markup.add(item1, item2, item3)
            bot.send_message(message.chat.id, "–í–∞–∫–∞–Ω—Å–∏–π –ø–æ –¥–∞–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, –≤–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ", reply_markup=markup)
            user_states.set(message.chat.id, "—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞—Å–Ω—è_–±–¥")
            # button_handler_filter_vacancy_bd(message)
        else:
            for i in range(20):
                post_preprocess_vacancies = vacancies_to_string(response.json()[i])
                # print(post_preprocess_vacancies)
                post_preprocess_vacancies[1] = post_preprocess_vacancies[1]['name']
                post_preprocess_vacancies[2] = check_salary(post_preprocess_vacancies[2])
                
                post_preprocess_vacancies[3] = post_preprocess_vacancies[3]['name']
                post_preprocess_vacancies[4] = post_preprocess_vacancies[4]['name']
                vacancies_str = '\n'.join(post_preprocess_vacancies)
                markup = types.ReplyKeyboardRemove(selective=False)
                bot.send_message(message.chat.id, vacancies_str, reply_markup=markup)

            markup = types.ReplyKeyboardMarkup()
            item1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
            item2 = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é")
            item3 = types.KeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ")
            markup.add(item1, item2, item3)
            bot.send_message(message.chat.id, "–ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—É—á–∏—Ç—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∞–ª–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º –≤ —Å–≤—è–∑–∏ —Å –∂–∞–¥–Ω–æ—Å—å—é –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∑–∞ –≥–æ–ª–æ–≤–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=markup)
            user_states.set(message.chat.id, "—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞—Å–Ω—è_–±–¥")
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("/start")
        markup.add(item1)
        bot.send_message(message.chat.id, "–≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
        return
    
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞—Å–Ω—è_–±–¥")
def button_handler_filter_vacancy_bd(message):
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter(message)
    elif message.text == "–í–≤–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é":
        user_states.set(message.chat.id, "–≤–≤–æ–¥_–≤–∞–∫–∞–Ω—Å–∏–∏")
        answer(message)
    elif message.text == "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ":
        user_states.set(message.chat.id, "–∑–∞–ø—Ä–æ—Å_–≤_–±–¥")
        db_query(message)
    else:
        bot.send_message(message.chat.id, "–Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫")
        user_states.set(message.chat.id, "—Ñ–∏–ª—å—Ç—Ä_–≤–∞–∫–∞—Å–Ω—è_–±–¥")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
def filter(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í—ã–±–æ—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
    item2 = types.KeyboardButton("–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞")
    item3 = types.KeyboardButton("–í—ã–±–æ—Ä –æ–ø—ã—Ç–∞")
    item4 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π")
    item5 = types.KeyboardButton("C–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞")
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=markup)
    user_states.set(message.chat.id, "–∑–∞–Ω—è—Ç–æ—Å—Ç—å_—Ä–µ–≥–∏–æ–Ω_–æ–ø—ã—Ç_–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π")
    button_handler_employment_region_experience_select(message)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–∑–∞–Ω—è—Ç–æ—Å—Ç—å_—Ä–µ–≥–∏–æ–Ω_–æ–ø—ã—Ç_–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏—Ö")
def button_handler_employment_region_experience_select(message):
    if message.text == "–í—ã–±–æ—Ä –æ–ø—ã—Ç–∞":
        user_states.set(message.chat.id, "—Ñ–∏–ª—å—Ç—Ä_–æ–ø—ã—Ç")
        filter_experiance(message)
    elif message.text == "–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞":
        user_states.set(message.chat.id, "—Ñ–∏–ª—å—Ç—Ä_—Ä–µ–≥–∏–æ–Ω")
        filter_region(message)
    elif message.text == "–í—ã–±–æ—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏":
        user_states.set(message.chat.id, "—Ñ–∏–ª—å—Ç–µ—Ä_–∑–∞–Ω—è—Ç–æ—Å—Ç—å")
        filter_employment(message)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π":
        user_states.set(message.chat.id, "–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏–π_–¥–µ–π—Å—Ç–≤–∏–π")
        select(message)
    elif message.text == "C–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞":##########################################################33
        # print("—Å–±—Ä–æ—Å")
        filter_vacancy.emp =""
        filter_vacancy.exp = ""
        filter_vacancy.region = ""
        user_states.set(message.chat.id, "–∑–∞–Ω—è—Ç–æ—Å—Ç—å_—Ä–µ–≥–∏–æ–Ω_–æ–ø—ã—Ç_–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏—Ö")
    else:
        user_states.set(message.chat.id, "–∑–∞–Ω—è—Ç–æ—Å—Ç—å_—Ä–µ–≥–∏–æ–Ω_–æ–ø—ã—Ç_–≤—ã–±–æ—Ä_–¥–∞–ª—å–Ω–µ–π—à–∏—Ö")
        bot.send_message(message.chat.id, "–Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "—Ñ–∏–ª—å—Ç—Ä_–æ–ø—ã—Ç")
def filter_experiance(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–µ—Ç –æ–ø—ã—Ç–∞")
    item2 = types.KeyboardButton("–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç")
    item3 = types.KeyboardButton("–û—Ç 3 –¥–æ 6 –ª–µ—Ç")
    item4 = types.KeyboardButton("–ë–æ–ª–µ–µ 6 –ª–µ—Ç")
    item5 = types.KeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å")
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π", reply_markup=markup)
    user_states.set(message.chat.id, "–í—ã–±–æ—Ä_–æ–ø—ã—Ç")
    select_experiance(message)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–í—ã–±–æ—Ä_–æ–ø—ã—Ç")
def select_experiance(message):
    print('adfs')
    if message.text == "–ù–µ—Ç –æ–ø—ã—Ç–∞":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.exp = "noExperience"
        filter(message)
    elif message.text == "–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.exp = "between1And3"
        filter(message)
    elif message.text == "–û—Ç 3 –¥–æ 6 –ª–µ—Ç":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.exp = "between3And6"
        filter(message)
    elif message.text == "–ë–æ–ª–µ–µ 6 –ª–µ—Ç":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.exp = "moreThan6"
        filter(message)
    elif message.text == "–ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter(message)
    else:
        user_states.set(message.chat.id, "–í—ã–±–æ—Ä_–æ–ø—ã—Ç")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "—Ñ–∏–ª—å—Ç—Ä_—Ä–µ–≥–∏–æ–Ω")
def filter_region(message):
    markup = types.ReplyKeyboardRemove(selective=True)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'", reply_markup=markup)
    user_states.set(message.chat.id, "–í—ã–±–æ—Ä_–≥–æ—Ä–æ–¥–∞")
    select_region(message)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–í—ã–±–æ—Ä_–≥–æ—Ä–æ–¥–∞")
def select_region(message):
    with open('city2id.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
        if message.text.lower().capitalize() in data.keys():
            filter_vacancy.region = message.text.lower().capitalize()
            user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
            filter(message)
        elif message.text.lower() == '–Ω–µ—Ç':
            user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
            filter(message)
        else:
            bot.send_message(message.chat.id, "—Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            user_states.set(message.chat.id, "–í—ã–±–æ—Ä_–≥–æ—Ä–æ–¥–∞")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "—Ñ–∏–ª—å—Ç–µ—Ä_–∑–∞–Ω—è—Ç–æ—Å—Ç—å")
def filter_employment(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å")
    item2 = types.KeyboardButton("–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å")
    item3 = types.KeyboardButton("–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
    item4 = types.KeyboardButton("–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ")
    item5 = types.KeyboardButton("–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞")
    item6 = types.KeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å")
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π", reply_markup=markup)
    user_states.set(message.chat.id, "–í—ã–±–æ—Ä_–∑–Ω–∞—è—Ç–æ—Å—Ç–∏")
    select_employment(message)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "–í—ã–±–æ—Ä_–∑–Ω–∞—è—Ç–æ—Å—Ç–∏")
def select_employment(message):
    if message.text == "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.emp = "full"
        filter(message)
    elif message.text == "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.emp = "part"
        filter(message)
    elif message.text == "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.emp = "project"
        filter(message)
    elif message.text == "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter_vacancy.emp = "volunteer"
        filter(message)
    elif message.text == "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞":
        filter_vacancy.emp = "probation"
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter(message)
    elif message.text == "–ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—Ç—å":
        user_states.set(message.chat.id, "–Ω–∞—Å—Ç—Ä–æ–π–∫_—Ñ–∏–ª—å—Ç—Ä–∞")
        filter(message)
    else:
        user_states.set(message.chat.id, "–í—ã–±–æ—Ä_–∑–Ω–∞—è—Ç–æ—Å—Ç–∏")



bot.polling()  
    
